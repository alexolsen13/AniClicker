//SCRIPT ACHMENU
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;//библиотека для использования UI-элементов
using UnityEngine.SceneManagement;//библиотека для перехода между сценами

public class AchMenu : MonoBehaviour
{
    public int money;//переменная, которая хранит кол-во заработанных денег
    public int total_money;//переменная, которая отслеживает, сколько всего заработано денег за весь период игры
    [SerializeField] Button firstAch;
    [SerializeField] bool isFirst;

    public string[] arrayTitles;//массив строк, в котором записываются названия бонусов
    public Sprite[] arraySprites;//массив спрайтов(картинок), которые используются в бонусах
    public GameObject button;//кнопка для получения бонуса
    public GameObject content;

    private List<GameObject> list = new List<GameObject>();//переменные, необходимые для работы со списком
    private VerticalLayoutGroup _group;

    void Start()
    {
        money = PlayerPrefs.GetInt("money");//загрузка сохраненного значения денег при запуске игры
        total_money = PlayerPrefs.GetInt("total_money");//загрузка сохраненного значения общего кол-ва денег при запуске игры
        isFirst = PlayerPrefs.GetInt("isFirst") == 1 ? true : false;

        RectTransform rectT = content.GetComponent<RectTransform>();//обращение к компоненту RectTransform
        rectT.transform.localPosition = new Vector3(0.0f, 0.0f, 0.0f);//у этого компонента значения localposition ставим в нулевые позиции,чтобы область контента не выходила за область экрана
        _group = GetComponent<VerticalLayoutGroup>();

        setAchieves();//вызов метода

        if (isFirst)//запуск пассивного фарма
        {
            StartCoroutine(IdleFarm());
        }
    }

    private void RemoveList()//удалить все бонусы из списка перед тем как выполнится следующий метод, чтобы не заспавнилось никакаго лишнего бонуса
    {
        foreach (var elem in list)
        {
            Destroy(elem);
        }
        list.Clear();
    }

    void setAchieves()//метод, который добавляет все бонусы на экран
    {
        RectTransform recT = content.GetComponent<RectTransform>();
        recT.transform.localPosition = new Vector3(0.0f, 0.0f, 0.0f);
        RemoveList();//вызов метода
        if (arrayTitles.Length>0)//если массив что-то содержит, то это выполняется
        {
            var pr1 = Instantiate(button, transform);//создание образца достижений
            var h = pr1.GetComponent<RectTransform>().rect.height;//создаем высоту
            var tr = GetComponent < RectTransform>();//помещение всех свойств
            tr.sizeDelta = new Vector2(tr.rect.width, h * arrayTitles.Length);//изменение размера
            Destroy(pr1);
            for(var i = 0; i < arrayTitles.Length;i++)//цикл, который проходит по всем бонусам
            {
                var pr= Instantiate(button, transform);
                pr.GetComponentInChildren<Text>().text = arrayTitles[i];//загружае текст из массива
                pr.GetComponentsInChildren<Image>()[1].sprite = arraySprites[i];//загружает картинку
                var i1 = i;
                pr.GetComponent<Button>().onClick.AddListener(() => GetAchievement(i1));//обработка нажатия на кнопку 
                list.Add(pr);
            }
        }
    }

    void GetAchievement(int id)
    {
        switch(id)//в завимости от случая и нажатия на определенный бонус, добавляеься опред. кол-во денег
        {
            case 0:
                Debug.Log(id);
                money += 1;
                PlayerPrefs.SetInt("money", money);
                break;
            case 1:
                Debug.Log(id);
                money += 10;
                PlayerPrefs.SetInt("money", money);
                break;
            case 2:
                Debug.Log(id);
                money += 1000;
                PlayerPrefs.SetInt("money", money);
                break;
            case 3:
                Debug.Log(id);
                money += 10000;
                PlayerPrefs.SetInt("money", money);
                break;
            case 4:
                Debug.Log(id);
                money += 1000000;
                PlayerPrefs.SetInt("money", money);
                break;
        }
    }

    IEnumerator IdleFarm()//функция для пассивного заработка денег
    {
        yield return new WaitForSeconds(1);//с помощью все действия ниже этой строчки будут происходить с интервалом в 1 секунду
        money++;//+1 к счету денег
        Debug.Log(money);//вывод на консоль для проверки
        PlayerPrefs.SetInt("money", money);//сохранение кол-ва денег
        StartCoroutine(IdleFarm());//запуск функции заново каждый раз
    }

    public void ToMenu()//функция для возврата на сцену главного меню
    {
        SceneManager.LoadScene(0);
    }
}

//SCRIPT MAINMENU
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;//библиотека для использования UI-элементов
using UnityEngine.SceneManagement;//библиотека для перехода между сценами

public class MainMenu : MonoBehaviour
{
    [SerializeField] int money;//переменная, которая хранит кол-во заработанных денег
    public int total_money;//переменная, которая отслеживает, сколько всего заработано денег за весь период игры
    public Text moneyText;//переменная для отображения кол-ва денег в главном меню
    public GameObject effect;
    public GameObject button;
    public AudioSource audioSource;

    
    private void Start()
    {
        audioSource = GetComponent<AudioSource>();
        money = PlayerPrefs.GetInt("money");//загрузка сохраненного значения денег при запуске игры
        total_money = PlayerPrefs.GetInt("total_money");//загрузка сохраненного значения общего кол-ва денег при запуске игры
        bool isFirst = PlayerPrefs.GetInt("isFirst") == 1 ? true : false;
        if (isFirst)
        {
            StartCoroutine(IdleFarm());
        }
    }

    public void ButtonClick()//функция, отвечающая за действия, которые происходят при нажатии на кликер-кнопку
    {
        money++;//при нажатии увелечение значения на 1 единицу
        total_money++;
        PlayerPrefs.SetInt("money", money);//после каждого нажатия на кнопку будет сохраняться значение money
        PlayerPrefs.SetInt("total_money", total_money);//после каждого нажатия на кнопку будет сохраняться значение total_money
        Instantiate(effect, button.GetComponent<RectTransform>().position.normalized, Quaternion.identity);
        button.GetComponent<RectTransform>().localScale = new Vector3(0.95f, 0.95f, 0f);
        audioSource.Play();
    }

    public void onClickUp()
    {
        button.GetComponent<RectTransform>().localScale = new Vector3(1f, 1f, 0f);
    }

    IEnumerator IdleFarm()//функция для пассивного заработка денег
    {
        yield return new WaitForSeconds(1);//с помощью все действия ниже этой строчки будут происходить с интервалом в 1 секунду
        money++;
        Debug.Log(money);
        PlayerPrefs.SetInt("money", money);
        StartCoroutine(IdleFarm());
    }
    
    public void ToAchievements()//функция для перехода на сцену Buy
    {
        SceneManager.LoadScene(1);
    }

    public void ToShop()//функция для перехода на сцену Shop
    {
        SceneManager.LoadScene(2);
    }

    void Update()
    {
        moneyText.text = money.ToString();//значение money переводим в строку
    }
}

//SCRIPT MUSIC
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Music : MonoBehaviour
{
    private static Music Instance;

    void Awake()//функция, с помощью которой музыка может играть дальше, если перейти в другую сцену
    {
        if (Instance != null)//если уже есть музыка на сцене, то компонент audioSource будем удалять
            Destroy(gameObject);
        else//иначе будем оставлять музыку
        {
            Instance = this;
            DontDestroyOnLoad(transform.gameObject);
        }
    }
}
